通过匹配的方法，选择相应的正则表达式，得出匹配结果

**常用的匹配规则：**
模式|描述
:---:|:---:
\w|匹配字母、数字及下划线
\W|匹配不是字母、数字及下划线的字符
\s|匹配任意空白字符，等价于[\t\n\r\f]
\S|匹配任意非空字符
\d|匹配任意数字，等价于[0-9]
\D|匹配任意非数字的字符
\A|匹配字符串开头
\Z|匹配字符串结尾，如果存在换行，只匹配到换行前的结束字符串
\z|匹配字符串结尾，如果存在换行，同时还会匹配换行符
\G|匹配最后匹配完成的位置
\n|匹配一个换行符
\t|匹配一个制表符
^|匹配一行字符串的开头
$|匹配一行字符串的结尾
.|匹配任意字符，除了换行符，当re.DOTALL标记被指定时，则可以匹配包括换行符的任意字符
[...]|用来表示一组字符，单独列出，比如[amk]匹配a、m或k
[^...]|不在[]中的字符，比如[^abc]匹配除了a、b、c之外的字符
* |匹配0个或多个表达式
+|匹配1个或多个表达式
?|匹配0个或1个前面的正则表达式定义的片段，非贪婪方式
{n}|精确匹配n个前面的表达式
{n, m}|匹配n到m次由前面正则表达式定义的片段，贪婪方式
a|b|匹配a或b
( )|匹配括号内的表达式，也表示一个组

**match()** ：常用的匹配方法，向它传入要匹配的字符串以及正则表达式，就可以检测这个正则表达式是否匹配字符串。例：
```
import re
 
content = 'Hello 123 4567 World_This is a Regex Demo'
print(len(content))
result = re.match('^Hello\s\d\d\d\s\d{4}\s\w{10}', content)
print(result)
print(result.group())
print(result.span())
```
41
<re.Match object; span=(0, 25), match='Hello 123 4567 World_This'>
Hello 123 4567 World_This
(0, 25)
